"""
Steps espec√≠ficos para la Alta de Zafra
Sistema de Automatizaci√≥n - Zucarmex QA

Nota: Los steps de autenticaci√≥n se reutilizan de alta_catalogo_steps.py
"""

from datetime import datetime

from behave import given, then, when

from pages.alta_zafra_page import AltaZafraPage


@given("que el navegador est√° configurado correctamente para zafra")
def step_navegador_configurado_zafra(context):
    """Configura el navegador espec√≠ficamente para pruebas de zafra"""
    # Usar el logger del context si est√° disponible, sino crear uno b√°sico
    if not hasattr(context, "logger"):
        import logging

        context.logger = logging.getLogger(__name__)

    context.logger.info("Configurando navegador para zafra...")

    try:
        # El driver ya est√° configurado en environment.py
        # Solo necesitamos inicializar la p√°gina espec√≠fica para zafra
        if hasattr(context, "driver"):
            context.alta_zafra_page = AltaZafraPage(context.driver)

            # Configurar carpeta de ejecuci√≥n espec√≠fica para este escenario
            feature_name = "alta_zafra"
            scenario_name = "Autenticaci√≥n completa con OKTA para Alta de Zafra"
            execution_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

            context.alta_zafra_page.set_execution_folder(
                feature_name, scenario_name, execution_timestamp
            )

            context.logger.info(
                "‚úÖ Navegador configurado para zafra, inicializando p√°gina"
            )
            context.logger.info(
                f"üìÅ Evidencias se guardar√°n en: {context.alta_zafra_page.execution_folder}"
            )
        else:
            context.logger.error("‚ùå Driver no encontrado en context")
            raise AssertionError("Driver no configurado en environment")

    except Exception as e:
        context.logger.error(f"‚ùå Error configurando navegador para zafra: {e}")
        raise


@when("el usuario hace clic en Configuraci√≥n")
def step_usuario_hace_clic_configuracion(context):
    """Hace clic en el men√∫ Configuraci√≥n"""
    context.logger.info("Haciendo clic en Configuraci√≥n...")

    try:
        # Hacer clic en Configuraci√≥n
        resultado = context.alta_zafra_page.hacer_clic_configuracion()

        if not resultado:
            context.logger.error("‚ùå No se pudo hacer clic en Configuraci√≥n")
            raise AssertionError("Error al hacer clic en Configuraci√≥n")

        context.logger.info("‚úÖ Clic en Configuraci√≥n realizado exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en Configuraci√≥n: {e}")
        raise


@when("el usuario hace clic en Zafras")
def step_usuario_hace_clic_zafras(context):
    """Hace clic en el submen√∫ Zafras"""
    context.logger.info("Haciendo clic en Zafras...")

    try:
        # Hacer clic en Zafras
        resultado = context.alta_zafra_page.hacer_clic_zafras()

        if not resultado:
            context.logger.error("‚ùå No se pudo hacer clic en Zafras")
            raise AssertionError("Error al hacer clic en Zafras")

        context.logger.info("‚úÖ Clic en Zafras realizado exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en Zafras: {e}")
        raise


@when("el usuario hace clic en Nueva zafra")
def step_usuario_hace_clic_nueva_zafra(context):
    """Hace clic en el bot√≥n Nueva zafra"""
    context.logger.info("Haciendo clic en Nueva zafra...")

    try:
        # Hacer clic en Nueva zafra
        resultado = context.alta_zafra_page.hacer_clic_nueva_zafra()

        if not resultado:
            context.logger.error("‚ùå No se pudo hacer clic en Nueva zafra")
            raise AssertionError("Error al hacer clic en Nueva zafra")

        context.logger.info("‚úÖ Clic en Nueva zafra realizado exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en Nueva zafra: {e}")
        raise


# El environment.py ya maneja la limpieza del navegador
