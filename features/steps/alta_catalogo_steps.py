"""
Steps para la Alta de Cat√°logo
Sistema de Automatizaci√≥n - Zucarmex QA
"""

import json
import os
from datetime import datetime

from behave import given, then, when
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

from pages.alta_catalogo_page import AltaCatalogoPage
from utils.advanced_logger import AdvancedLogger


def get_page_object(context):
    """Obtiene el objeto de p√°gina apropiado (zafra o cat√°logo)"""
    if hasattr(context, "alta_zafra_page"):
        return context.alta_zafra_page
    elif hasattr(context, "alta_catalogo_page"):
        return context.alta_catalogo_page
    else:
        raise AssertionError("No se encontr√≥ p√°gina configurada")


@given("que el navegador est√° configurado correctamente")
def step_navegador_configurado(context):
    """Configura el navegador para las pruebas"""
    # Usar el logger del context si est√° disponible, sino crear uno b√°sico
    if not hasattr(context, "logger"):
        import logging

        context.logger = logging.getLogger(__name__)

    context.logger.info("Configurando navegador...")

    try:
        # El driver ya est√° configurado en environment.py
        # Solo necesitamos inicializar la p√°gina
        if hasattr(context, "driver"):
            # Si ya existe una p√°gina de zafra configurada, usar esa
            if hasattr(context, "alta_zafra_page"):
                context.logger.info("‚úÖ Usando p√°gina de zafra ya configurada")
                return

            # Si no, inicializar p√°gina de cat√°logo
            context.alta_catalogo_page = AltaCatalogoPage(context.driver)

            # Configurar carpeta de ejecuci√≥n espec√≠fica para este escenario
            feature_name = "alta_catalogo"
            scenario_name = "Autenticaci√≥n completa con OKTA para Alta de Cat√°logo"
            execution_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

            context.alta_catalogo_page.set_execution_folder(
                feature_name, scenario_name, execution_timestamp
            )

            context.logger.info(
                "‚úÖ Navegador ya configurado, inicializando p√°gina de cat√°logo"
            )
            context.logger.info(
                f"üìÅ Evidencias se guardar√°n en: {context.alta_catalogo_page.execution_folder}"
            )
        else:
            context.logger.error("‚ùå Driver no encontrado en context")
            raise AssertionError("Driver no configurado en environment")

    except Exception as e:
        context.logger.error(f"‚ùå Error configurando navegador: {e}")
        raise


@given("que el usuario navega a la p√°gina de login")
def step_usuario_navega_login(context):
    """Navega a la p√°gina de login"""
    context.logger.info("Navegando a la p√°gina de login...")

    try:
        # Navegar a la p√°gina de login
        resultado = context.alta_catalogo_page.navegar_a_login()

        if not resultado:
            context.logger.error("‚ùå No se pudo navegar a la p√°gina de login")
            raise AssertionError("Error al navegar a la p√°gina de login")

        # Verificar elementos de la p√°gina
        elementos_ok = context.alta_catalogo_page.verificar_elementos_pagina()

        if not elementos_ok:
            context.logger.warning("‚ö†Ô∏è Algunos elementos no se encontraron en la p√°gina")

        context.logger.info("‚úÖ Navegaci√≥n a login completada")

    except Exception as e:
        context.logger.error(f"‚ùå Error en navegaci√≥n a login: {e}")
        raise


@given("que el usuario navega a la p√°gina de login y hace clic inmediato")
def step_usuario_navega_login_clic_inmediato(context):
    """Navega a la p√°gina de login y hace clic inmediato en OKTA"""
    context.logger.info("Navegando a la p√°gina de login y haciendo clic inmediato...")

    try:
        # Obtener la p√°gina apropiada (zafra o cat√°logo)
        page = get_page_object(context)

        # Navegar y hacer clic inmediato
        resultado = page.navegar_a_login_y_clic_inmediato()

        if not resultado:
            context.logger.error("‚ùå No se pudo navegar y hacer clic inmediato")
            raise AssertionError("Error al navegar y hacer clic inmediato")

        context.logger.info("‚úÖ Navegaci√≥n y clic inmediato completado")

    except Exception as e:
        context.logger.error(f"‚ùå Error en navegaci√≥n y clic inmediato: {e}")
        raise


@when('el usuario hace clic inmediatamente en el bot√≥n "{boton}"')
def step_usuario_hace_clic_inmediato_boton(context, boton):
    """Hace clic inmediatamente en el bot√≥n especificado sin verificaciones adicionales"""
    context.logger.info(f"Haciendo clic inmediatamente en el bot√≥n: {boton}")

    try:
        if "OKTA" in boton.upper():
            resultado = context.alta_catalogo_page.hacer_clic_okta_inmediato()

            if not resultado:
                context.logger.error("‚ùå No se pudo hacer clic en el bot√≥n OKTA")
                raise AssertionError("Error al hacer clic en el bot√≥n OKTA")

            context.logger.info(
                "‚úÖ Clic inmediato en bot√≥n OKTA realizado exitosamente"
            )
        else:
            context.logger.error(f"‚ùå Bot√≥n no reconocido: {boton}")
            raise AssertionError(f"Bot√≥n no reconocido: {boton}")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en bot√≥n: {e}")
        raise


@when('el usuario hace clic en el bot√≥n "{boton}"')
def step_usuario_hace_clic_boton(context, boton):
    """Hace clic en el bot√≥n especificado"""
    context.logger.info(f"Haciendo clic en el bot√≥n: {boton}")

    try:
        if "OKTA" in boton.upper():
            resultado = context.alta_catalogo_page.hacer_clic_okta()

            if not resultado:
                context.logger.error("‚ùå No se pudo hacer clic en el bot√≥n OKTA")
                raise AssertionError("Error al hacer clic en el bot√≥n OKTA")

            context.logger.info("‚úÖ Clic en bot√≥n OKTA realizado exitosamente")
        else:
            context.logger.error(f"‚ùå Bot√≥n no reconocido: {boton}")
            raise AssertionError(f"Bot√≥n no reconocido: {boton}")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en bot√≥n: {e}")
        raise


@when("se cargan todos los elementos de la p√°gina")
def step_elementos_pagina_cargados(context):
    """Verifica que todos los elementos de la p√°gina est√©n cargados"""
    context.logger.info("Verificando carga de elementos de la p√°gina...")

    try:
        resultado = context.alta_catalogo_page.verificar_elementos_pagina()

        if not resultado:
            context.logger.warning("‚ö†Ô∏è No todos los elementos se cargaron correctamente")
        else:
            context.logger.info("‚úÖ Todos los elementos de la p√°gina est√°n cargados")

    except Exception as e:
        context.logger.error(f"‚ùå Error verificando elementos: {e}")
        raise


@then("debe redirigirse a la p√°gina de autenticaci√≥n de OKTA")
def step_redireccion_okta(context):
    """Verifica que se produzca la redirecci√≥n a OKTA"""
    context.logger.info("Verificando redirecci√≥n a OKTA...")

    try:
        # Obtener la p√°gina apropiada (zafra o cat√°logo)
        page = get_page_object(context)

        resultado = page.verificar_redireccion_okta()

        if not resultado:
            context.logger.warning("‚ö†Ô∏è No se detect√≥ redirecci√≥n a OKTA")
            # No fallar la prueba, solo registrar el warning
        else:
            context.logger.info("‚úÖ Redirecci√≥n a OKTA verificada")

    except Exception as e:
        context.logger.error(f"‚ùå Error verificando redirecci√≥n: {e}")
        # No fallar la prueba por este error


@when("el usuario ingresa el usuario {usuario} en OKTA")
def step_usuario_ingresa_usuario_okta(context, usuario):
    """Ingresa el usuario en la p√°gina de OKTA"""
    context.logger.info(f"Ingresando usuario en OKTA: {usuario}")

    try:
        # Verificar que estamos en la p√°gina de OKTA
        pagina_okta = context.alta_catalogo_page.verificar_pagina_okta()

        if not pagina_okta:
            context.logger.warning("‚ö†Ô∏è No se detect√≥ p√°gina de OKTA, continuando...")

        # Ingresar el usuario
        resultado = context.alta_catalogo_page.ingresar_usuario_okta(usuario)

        if not resultado:
            context.logger.error("‚ùå No se pudo ingresar el usuario en OKTA")
            raise AssertionError("Error al ingresar usuario en OKTA")

        context.logger.info("‚úÖ Usuario ingresado exitosamente en OKTA")

    except Exception as e:
        context.logger.error(f"‚ùå Error ingresando usuario en OKTA: {e}")
        raise


@when("el usuario hace clic en el bot√≥n Siguiente de OKTA")
def step_usuario_hace_clic_siguiente_okta(context):
    """Hace clic en el bot√≥n Siguiente de OKTA"""
    context.logger.info("Haciendo clic en bot√≥n Siguiente de OKTA...")

    try:
        resultado = context.alta_catalogo_page.hacer_clic_siguiente_okta()

        if not resultado:
            context.logger.error("‚ùå No se pudo hacer clic en bot√≥n Siguiente")
            raise AssertionError("Error al hacer clic en bot√≥n Siguiente")

        context.logger.info("‚úÖ Clic en bot√≥n Siguiente realizado exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en bot√≥n Siguiente: {e}")
        raise


@when("el usuario ingresa el usuario {usuario} y hace clic en Siguiente de OKTA")
def step_usuario_ingresa_y_clic_siguiente_okta(context, usuario):
    """Ingresa el usuario y hace clic en Siguiente de forma ultra r√°pida"""
    context.logger.info(f"Ingresando usuario y haciendo clic en Siguiente: {usuario}")

    try:
        # Obtener la p√°gina apropiada (zafra o cat√°logo)
        page = get_page_object(context)

        # Verificar que estamos en la p√°gina de OKTA
        pagina_okta = page.verificar_pagina_okta()

        if not pagina_okta:
            context.logger.warning("‚ö†Ô∏è No se detect√≥ p√°gina de OKTA, continuando...")

        # Ingresar usuario y hacer clic en Siguiente de forma ultra r√°pida
        resultado = page.ingresar_usuario_y_clic_siguiente_okta(usuario)

        if not resultado:
            context.logger.error(
                "‚ùå No se pudo ingresar usuario y hacer clic en Siguiente"
            )
            raise AssertionError("Error al ingresar usuario y hacer clic en Siguiente")

        context.logger.info(
            "‚úÖ Usuario ingresado y clic en Siguiente realizado exitosamente"
        )

    except Exception as e:
        context.logger.error(
            f"‚ùå Error ingresando usuario y haciendo clic en Siguiente: {e}"
        )
        raise


@when("el usuario ingresa la contrase√±a {contrasena} en OKTA")
def step_usuario_ingresa_contrasena_okta(context, contrasena):
    """Ingresa la contrase√±a en la p√°gina de OKTA"""
    context.logger.info(f"Ingresando contrase√±a en OKTA: {contrasena}")

    try:
        # Verificar que estamos en la p√°gina de contrase√±a de OKTA
        pagina_contrasena = (
            context.alta_catalogo_page.verificar_pagina_contrasena_okta()
        )

        if not pagina_contrasena:
            context.logger.warning(
                "‚ö†Ô∏è No se detect√≥ p√°gina de contrase√±a de OKTA, continuando..."
            )

        # Ingresar la contrase√±a
        resultado = context.alta_catalogo_page.ingresar_contrasena_okta(contrasena)

        if not resultado:
            context.logger.error("‚ùå No se pudo ingresar la contrase√±a en OKTA")
            raise AssertionError("Error al ingresar contrase√±a en OKTA")

        context.logger.info("‚úÖ Contrase√±a ingresada exitosamente en OKTA")

    except Exception as e:
        context.logger.error(f"‚ùå Error ingresando contrase√±a en OKTA: {e}")
        raise


@when("el usuario hace clic en el bot√≥n Verificar de OKTA")
def step_usuario_hace_clic_verificar_okta(context):
    """Hace clic en el bot√≥n Verificar de OKTA"""
    context.logger.info("Haciendo clic en bot√≥n Verificar de OKTA...")

    try:
        resultado = context.alta_catalogo_page.hacer_clic_verificar_okta()

        if not resultado:
            context.logger.error("‚ùå No se pudo hacer clic en bot√≥n Verificar")
            raise AssertionError("Error al hacer clic en bot√≥n Verificar")

        context.logger.info("‚úÖ Clic en bot√≥n Verificar realizado exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en bot√≥n Verificar: {e}")
        raise


@when("el usuario ingresa la contrase√±a {contrasena} y hace clic en Verificar de OKTA")
def step_usuario_ingresa_contrasena_y_clic_verificar_okta(context, contrasena):
    """Ingresa la contrase√±a y hace clic en Verificar de forma ultra r√°pida"""
    context.logger.info(
        f"Ingresando contrase√±a y haciendo clic en Verificar: {contrasena}"
    )

    try:
        # Verificar que estamos en la p√°gina de contrase√±a de OKTA
        pagina_contrasena = (
            context.alta_catalogo_page.verificar_pagina_contrasena_okta()
        )

        if not pagina_contrasena:
            context.logger.warning(
                "‚ö†Ô∏è No se detect√≥ p√°gina de contrase√±a de OKTA, continuando..."
            )

        # Ingresar contrase√±a y hacer clic en Verificar de forma ultra r√°pida
        resultado = (
            context.alta_catalogo_page.ingresar_contrasena_y_clic_verificar_okta(
                contrasena
            )
        )

        if not resultado:
            context.logger.error(
                "‚ùå No se pudo ingresar contrase√±a y hacer clic en Verificar"
            )
            raise AssertionError(
                "Error al ingresar contrase√±a y hacer clic en Verificar"
            )

        context.logger.info(
            "‚úÖ Contrase√±a ingresada y clic en Verificar realizado exitosamente"
        )

    except Exception as e:
        context.logger.error(
            f"‚ùå Error ingresando contrase√±a y haciendo clic en Verificar: {e}"
        )
        raise


@when(
    "el usuario ingresa la contrase√±a {contrasena} y hace clic en Verificar de OKTA ULTRA R√ÅPIDO"
)
def step_usuario_ingresa_contrasena_y_clic_verificar_okta_ultra_rapido(
    context, contrasena
):
    """Ingresa la contrase√±a y hace clic en Verificar de forma ULTRA R√ÅPIDA"""
    context.logger.info(
        f"Ingresando contrase√±a y haciendo clic en Verificar ULTRA R√ÅPIDO: {contrasena}"
    )

    try:
        # Verificar que estamos en la p√°gina de contrase√±a de OKTA
        pagina_contrasena = (
            context.alta_catalogo_page.verificar_pagina_contrasena_okta()
        )

        if not pagina_contrasena:
            context.logger.warning(
                "‚ö†Ô∏è No se detect√≥ p√°gina de contrase√±a de OKTA, continuando..."
            )

        # Ingresar contrase√±a y hacer clic en Verificar de forma ULTRA R√ÅPIDA
        resultado = context.alta_catalogo_page.ingresar_contrasena_y_clic_verificar_okta_ultra_rapido(
            contrasena
        )

        if not resultado:
            context.logger.error(
                "‚ùå No se pudo ingresar contrase√±a y hacer clic en Verificar ULTRA R√ÅPIDO"
            )
            raise AssertionError(
                "Error al ingresar contrase√±a y hacer clic en Verificar ULTRA R√ÅPIDO"
            )

        context.logger.info(
            "‚úÖ Contrase√±a ingresada y clic en Verificar ULTRA R√ÅPIDO realizado exitosamente"
        )

    except Exception as e:
        context.logger.error(
            f"‚ùå Error ingresando contrase√±a y haciendo clic en Verificar ULTRA R√ÅPIDO: {e}"
        )
        raise


@when(
    "el usuario ingresa la contrase√±a {contrasena} y hace clic en Verificar de OKTA con selector espec√≠fico"
)
def step_usuario_ingresa_contrasena_y_clic_verificar_okta_selector_especifico(
    context, contrasena
):
    """Ingresa la contrase√±a y hace clic en Verificar usando el selector espec√≠fico"""
    context.logger.info(
        f"Ingresando contrase√±a y haciendo clic en Verificar con selector espec√≠fico: {contrasena}"
    )

    try:
        # Verificar que estamos en la p√°gina de contrase√±a de OKTA
        pagina_contrasena = (
            context.alta_catalogo_page.verificar_pagina_contrasena_okta()
        )

        if not pagina_contrasena:
            context.logger.warning(
                "‚ö†Ô∏è No se detect√≥ p√°gina de contrase√±a de OKTA, continuando..."
            )

        # Ingresar contrase√±a y hacer clic en Verificar con selector espec√≠fico
        resultado = context.alta_catalogo_page.ingresar_contrasena_y_clic_verificar_okta_selector_especifico(
            contrasena
        )

        if not resultado:
            context.logger.error(
                "‚ùå No se pudo ingresar contrase√±a y hacer clic en Verificar con selector espec√≠fico"
            )
            raise AssertionError(
                "Error al ingresar contrase√±a y hacer clic en Verificar con selector espec√≠fico"
            )

        context.logger.info(
            "‚úÖ Contrase√±a ingresada y clic en Verificar con selector espec√≠fico realizado exitosamente"
        )

    except Exception as e:
        context.logger.error(
            f"‚ùå Error ingresando contrase√±a y haciendo clic en Verificar con selector espec√≠fico: {e}"
        )
        raise


@when(
    "el usuario ingresa la contrase√±a {contrasena} y hace clic en Verificar de OKTA con debug"
)
def step_usuario_ingresa_contrasena_y_clic_verificar_okta_debug(context, contrasena):
    """Ingresa la contrase√±a y hace clic en Verificar usando debug"""
    context.logger.info(
        f"Ingresando contrase√±a y haciendo clic en Verificar con debug: {contrasena}"
    )

    try:
        # Obtener la p√°gina apropiada (zafra o cat√°logo)
        page = get_page_object(context)

        # Verificar que estamos en la p√°gina de contrase√±a de OKTA
        pagina_contrasena = page.verificar_pagina_contrasena_okta()

        if not pagina_contrasena:
            context.logger.warning(
                "‚ö†Ô∏è No se detect√≥ p√°gina de contrase√±a de OKTA, continuando..."
            )

        # Ingresar contrase√±a y hacer clic en Verificar con debug
        resultado = page.ingresar_contrasena_y_clic_verificar_debug(contrasena)

        if not resultado:
            context.logger.error(
                "‚ùå No se pudo ingresar contrase√±a y hacer clic en Verificar con debug"
            )
            raise AssertionError(
                "Error al ingresar contrase√±a y hacer clic en Verificar con debug"
            )

        context.logger.info(
            "‚úÖ Contrase√±a ingresada y clic en Verificar con debug realizado exitosamente"
        )

    except Exception as e:
        context.logger.error(
            f"‚ùå Error ingresando contrase√±a y haciendo clic en Verificar con debug: {e}"
        )
        raise


@when("el usuario hace clic en Configurador")
def step_usuario_hace_clic_configurador(context):
    """Hace clic en el men√∫ Configurador"""
    context.logger.info("Haciendo clic en Configurador...")

    try:
        # Hacer clic en Configurador
        resultado = context.alta_catalogo_page.hacer_clic_configurador()

        if not resultado:
            context.logger.error("‚ùå No se pudo hacer clic en Configurador")
            raise AssertionError("Error al hacer clic en Configurador")

        context.logger.info("‚úÖ Clic en Configurador realizado exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en Configurador: {e}")
        raise


@when("el usuario hace clic en Gestor de cat√°logos")
def step_usuario_hace_clic_gestor_catalogos(context):
    """Hace clic en Gestor de cat√°logos"""
    context.logger.info("Haciendo clic en Gestor de cat√°logos...")

    try:
        # Hacer clic en Gestor de cat√°logos
        resultado = context.alta_catalogo_page.hacer_clic_gestor_catalogos()

        if not resultado:
            context.logger.error("‚ùå No se pudo hacer clic en Gestor de cat√°logos")
            raise AssertionError("Error al hacer clic en Gestor de cat√°logos")

        context.logger.info("‚úÖ Clic en Gestor de cat√°logos realizado exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en Gestor de cat√°logos: {e}")
        raise


@when("el usuario hace clic en NUEVO CAT√ÅLOGO")
def step_usuario_hace_clic_nuevo_catalogo(context):
    """Hace clic en NUEVO CAT√ÅLOGO"""
    context.logger.info("Haciendo clic en NUEVO CAT√ÅLOGO...")

    try:
        # Hacer clic en NUEVO CAT√ÅLOGO
        resultado = context.alta_catalogo_page.hacer_clic_nuevo_catalogo()

        if not resultado:
            context.logger.error("‚ùå No se pudo hacer clic en NUEVO CAT√ÅLOGO")
            raise AssertionError("Error al hacer clic en NUEVO CAT√ÅLOGO")

        context.logger.info("‚úÖ Clic en NUEVO CAT√ÅLOGO realizado exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en NUEVO CAT√ÅLOGO: {e}")
        raise


@when("el usuario hace clic en NUEVO CAT√ÅLOGO con debug")
def step_usuario_hace_clic_nuevo_catalogo_debug(context):
    """Hace clic en NUEVO CAT√ÅLOGO usando debug"""
    context.logger.info("Haciendo clic en NUEVO CAT√ÅLOGO con debug...")

    try:
        # Hacer clic en NUEVO CAT√ÅLOGO con debug
        resultado = context.alta_catalogo_page.hacer_clic_nuevo_catalogo_debug()

        if not resultado:
            context.logger.error("‚ùå No se pudo hacer clic en NUEVO CAT√ÅLOGO con debug")
            raise AssertionError("Error al hacer clic en NUEVO CAT√ÅLOGO con debug")

        context.logger.info(
            "‚úÖ Clic en NUEVO CAT√ÅLOGO con debug realizado exitosamente"
        )

    except Exception as e:
        context.logger.error(f"‚ùå Error haciendo clic en NUEVO CAT√ÅLOGO con debug: {e}")
        raise


@when("el usuario llena el formulario completo con Test")
def step_usuario_llena_formulario_completo(context):
    """Llena el formulario completo con Test en todos los campos"""
    context.logger.info("Llenando formulario completo con Test...")

    try:
        # Llenar formulario completo
        resultado = context.alta_catalogo_page.llenar_formulario_completo()

        if not resultado:
            context.logger.error("‚ùå No se pudo llenar el formulario completo")
            raise AssertionError("Error al llenar el formulario completo")

        context.logger.info("‚úÖ Formulario completo llenado exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error llenando formulario completo: {e}")
        raise


@when("el usuario guarda los datos generales")
def step_usuario_guarda_datos_generales(context):
    """Guarda los datos generales del formulario"""
    context.logger.info("Guardando datos generales...")

    try:
        # Guardar datos generales
        resultado = context.alta_catalogo_page.guardar_datos_generales()

        if not resultado:
            context.logger.error("‚ùå No se pudieron guardar los datos generales")
            raise AssertionError("Error al guardar los datos generales")

        context.logger.info("‚úÖ Datos generales guardados exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error guardando datos generales: {e}")
        raise


@when("el usuario llena la estructura del cat√°logo con Test")
def step_usuario_llena_estructura_catalogo(context):
    """Llena la estructura del cat√°logo con Test en todos los campos"""
    context.logger.info("Llenando estructura del cat√°logo con Test...")

    try:
        # Llenar estructura del cat√°logo
        resultado = context.alta_catalogo_page.llenar_estructura_catalogo_completa()

        if not resultado:
            context.logger.error("‚ùå No se pudo llenar la estructura del cat√°logo")
            raise AssertionError("Error al llenar la estructura del cat√°logo")

        context.logger.info("‚úÖ Estructura del cat√°logo llenada exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error llenando estructura del cat√°logo: {e}")
        raise


@when("el usuario guarda la estructura del cat√°logo")
def step_usuario_guarda_estructura_catalogo(context):
    """Guarda la estructura del cat√°logo"""
    context.logger.info("Guardando estructura del cat√°logo...")

    try:
        # Guardar estructura del cat√°logo
        resultado = context.alta_catalogo_page.guardar_estructura_catalogo_debug()

        if not resultado:
            context.logger.error("‚ùå No se pudo guardar la estructura del cat√°logo")
            raise AssertionError("Error al guardar la estructura del cat√°logo")

        context.logger.info("‚úÖ Estructura del cat√°logo guardada exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error guardando estructura del cat√°logo: {e}")
        raise


@when("debe capturar evidencias del proceso")
def step_debe_capturar_evidencias_proceso(context):
    """Captura evidencias del proceso completado"""
    context.logger.info("Capturando evidencias del proceso...")

    try:
        # Capturar screenshot final
        context.alta_catalogo_page._capturar_screenshot("proceso_completado")

        context.logger.info("‚úÖ Evidencias del proceso capturadas exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error capturando evidencias del proceso: {e}")
        raise


@when("el usuario espera para validar manualmente la 2FA")
def step_usuario_espera_validacion_manual_2fa(context):
    """Espera a que el usuario valide manualmente la 2FA"""
    context.logger.info("Esperando validaci√≥n manual de 2FA...")

    try:
        # Obtener la p√°gina apropiada (zafra o cat√°logo)
        page = get_page_object(context)

        resultado = page.esperar_validacion_manual_2fa()

        if not resultado:
            context.logger.error("‚ùå Error en validaci√≥n manual de 2FA")
            raise AssertionError("Error en validaci√≥n manual de 2FA")

        context.logger.info("‚úÖ Validaci√≥n manual de 2FA completada exitosamente")

    except Exception as e:
        context.logger.error(f"‚ùå Error en validaci√≥n manual de 2FA: {e}")
        raise


@then("debe verificar que est√© en la p√°gina principal de Zucarmex")
def step_verificar_pagina_principal_zucarmex(context):
    """Verifica que estemos en la p√°gina principal de Zucarmex"""
    context.logger.info("Verificando p√°gina principal de Zucarmex...")

    try:
        # Obtener la p√°gina apropiada (zafra o cat√°logo)
        page = get_page_object(context)

        resultado = page.verificar_pagina_principal_zucarmex()

        if not resultado:
            context.logger.warning(
                "‚ö†Ô∏è No se pudo verificar completamente la p√°gina principal"
            )
            # No fallar la prueba, solo registrar el warning

        context.logger.info("‚úÖ Verificaci√≥n de p√°gina principal completada")

    except Exception as e:
        context.logger.error(f"‚ùå Error verificando p√°gina principal: {e}")
        # No fallar la prueba por este error


@then("debe verificar que el logo de Zulka est√© visible")
def step_verificar_logo_zulka(context):
    """Verifica que el logo de Zulka est√© visible"""
    context.logger.info("Verificando visibilidad del logo de Zulka...")

    try:
        # Obtener estado de la p√°gina
        estado = context.alta_catalogo_page.obtener_estado_pagina()

        if estado:
            context.logger.info(f"Estado de la p√°gina: {estado}")

        # Capturar screenshot final
        context.alta_catalogo_page._capturar_screenshot("verificacion_logo_zulka")

        context.logger.info("‚úÖ Verificaci√≥n del logo de Zulka completada")

    except Exception as e:
        context.logger.error(f"‚ùå Error verificando logo: {e}")
        raise


@then("debe verificar que el bot√≥n OKTA est√© disponible")
def step_verificar_boton_okta(context):
    """Verifica que el bot√≥n OKTA est√© disponible"""
    context.logger.info("Verificando disponibilidad del bot√≥n OKTA...")

    try:
        # Verificar elementos de la p√°gina
        resultado = context.alta_catalogo_page.verificar_elementos_pagina()

        if resultado:
            context.logger.info("‚úÖ Bot√≥n OKTA est√° disponible")
        else:
            context.logger.warning("‚ö†Ô∏è Bot√≥n OKTA no est√° disponible")

        # Capturar screenshot final
        context.alta_catalogo_page._capturar_screenshot("verificacion_boton_okta")

    except Exception as e:
        context.logger.error(f"‚ùå Error verificando bot√≥n OKTA: {e}")
        raise


@then("debe capturar screenshot de la p√°gina completa")
def step_capturar_screenshot_completo(context):
    """Captura un screenshot de la p√°gina completa"""
    context.logger.info("Capturando screenshot de la p√°gina completa...")

    try:
        context.alta_catalogo_page._capturar_screenshot("pagina_completa_final")
        context.logger.info("‚úÖ Screenshot de p√°gina completa capturado")

    except Exception as e:
        context.logger.error(f"‚ùå Error capturando screenshot: {e}")
        raise


@then("debe capturar evidencias del proceso")
def step_capturar_evidencias(context):
    """Captura evidencias del proceso completo"""
    context.logger.info("Capturando evidencias del proceso...")

    try:
        # Capturar screenshot final
        context.alta_catalogo_page._capturar_screenshot("evidencias_finales")

        # Obtener estado final de la p√°gina
        estado_final = context.alta_catalogo_page.obtener_estado_pagina()

        if estado_final:
            context.logger.info(f"Estado final de la p√°gina: {estado_final}")

        context.logger.info("‚úÖ Evidencias del proceso capturadas")

    except Exception as e:
        context.logger.error(f"‚ùå Error capturando evidencias: {e}")
        raise


# El environment.py ya maneja la limpieza del navegador
